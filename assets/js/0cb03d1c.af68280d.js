"use strict";(self.webpackChunkfoomo=self.webpackChunkfoomo||[]).push([[3098],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),p=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(r),m=o,g=u["".concat(i,".").concat(m)]||u[m]||d[m]||a;return r?n.createElement(g,l(l({ref:t},c),{},{components:r})):n.createElement(g,l({ref:t},c))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[u]="string"==typeof e?e:o,l[1]=s;for(var p=2;p<a;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9908:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={},l="Protocol",s={unversionedId:"projects/gotsrpc/protocol",id:"projects/gotsrpc/protocol",title:"Protocol",description:"A gotsrpc method call is a http POST of an array of arguments to http(s)://host/path/to/service/endpoint/, that will return an array of return values. By default JSON is used for serialization.",source:"@site/docs/projects/gotsrpc/protocol.md",sourceDirName:"projects/gotsrpc",slug:"/projects/gotsrpc/protocol",permalink:"/docs/projects/gotsrpc/protocol",draft:!1,editUrl:"https://github.com/foomo/foomo-docs/tree/main/foomo/docs/projects/gotsrpc/protocol.md",tags:[],version:"current",frontMatter:{},sidebar:"projectsSidebar",previous:{title:"Todos",permalink:"/docs/projects/gotsrpc/playground/todos"},next:{title:"Circuit Breaker",permalink:"/docs/projects/libraries/keel-circuit-breaker"}},i={},p=[{value:"HTTP status codes",id:"http-status-codes",level:2},{value:"Encoding / Marshalling",id:"encoding--marshalling",level:2},{value:"Curl example call to a running playground server",id:"curl-example-call-to-a-running-playground-server",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"protocol"},"Protocol"),(0,o.kt)("p",null,"A gotsrpc method call is a ",(0,o.kt)("strong",{parentName:"p"},"http POST")," of an ",(0,o.kt)("strong",{parentName:"p"},"array of arguments")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"http(s)://host/path/to/service/endpoint/<Method>"),", that will return an ",(0,o.kt)("strong",{parentName:"p"},"array of return values"),". By default JSON is used for serialization."),(0,o.kt)("p",null,"Gotsrpc calls are not RESTful, but access to the underlying http requests and responses is possible. This is usually used for header access."),(0,o.kt)("h2",{id:"http-status-codes"},"HTTP status codes"),(0,o.kt)("p",null,"The response status code is"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"200 for all responses (including the ones with business logic errors)"),(0,o.kt)("li",{parentName:"ul"},"500 when the go code, that implements the service interface panics")),(0,o.kt)("h2",{id:"encoding--marshalling"},"Encoding / Marshalling"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"gotsrpc")," supports "),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.json.org/"},"JSON")," (default)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://msgpack.org/"},"MessagePack")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pkg.go.dev/encoding/gob"},"gob"))),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("strong",{parentName:"p"},"gotsrpc service proxies are not using streaming encoders or decoders"),":"),(0,o.kt)("ul",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ul"},"incoming data will be read completely from the request body"),(0,o.kt)("li",{parentName:"ul"},"decoding / unmarshalling is not streaming (for all encodings)"),(0,o.kt)("li",{parentName:"ul"},"return values will be encoded / marshalled in the same manner"),(0,o.kt)("li",{parentName:"ul"},"the response is streamed")),(0,o.kt)("p",{parentName:"admonition"},"Thus you should ",(0,o.kt)("strong",{parentName:"p"},"use paging, when transferring a lot of data"),".")),(0,o.kt)("h2",{id:"curl-example-call-to-a-running-playground-server"},"Curl example call to a running playground server"),(0,o.kt)("p",null,"A curl call tells more than a thousand words:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'curl -v --data-raw \'["Visitor"]\' http://localhost:8080/services/helloworld/Hello\n# > POST /services/helloworld/Hello HTTP/1.1\n# > Host: localhost:8080\n# >\n# < HTTP/1.1 200 OK\n# < Content-Type: application/json; charset=utf-8\n# <\n# ["Hello Visitor"]\n')),(0,o.kt)("p",null,"When debugging and inspecting from the command line the ",(0,o.kt)("inlineCode",{parentName:"p"},"fx")," command is very helpful ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/antonmedv/fx"},"https://github.com/antonmedv/fx")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"curl -v --data-raw '[\"Visitor\"]' http://localhost:8080/services/helloworld/Hello | fx\n# starts fx which will read the server response from stdin\n# and provide a nice interactive json viewer\n")))}d.isMDXComponent=!0}}]);