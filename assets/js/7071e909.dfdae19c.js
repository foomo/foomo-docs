"use strict";(self.webpackChunkfoomo=self.webpackChunkfoomo||[]).push([[5500],{7596:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var o=t(5893),r=t(3905);const a={},i="Spreading",s={id:"frontend/typescript/spreading",title:"Spreading",description:"JavaScript spread syntax (...) is a surprisingly powerful construct. It has two main use cases in our applications:",source:"@site/docs/frontend/typescript/spreading.md",sourceDirName:"frontend/typescript",slug:"/frontend/typescript/spreading",permalink:"/docs/frontend/typescript/spreading",draft:!1,unlisted:!1,editUrl:"https://github.com/foomo/foomo-docs/tree/main/foomo/docs/frontend/typescript/spreading.md",tags:[],version:"current",frontMatter:{},sidebar:"frontendSidebar",previous:{title:"Objects",permalink:"/docs/frontend/typescript/objects"},next:{title:"Debugging in JavaScript",permalink:"/docs/frontend/debugging_js"}},c={},l=[{value:"Shallow copying",id:"shallow-copying",level:2},{value:"Populating jsx attributes",id:"populating-jsx-attributes",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.ah)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"spreading",children:"Spreading"}),"\n",(0,o.jsxs)(n.p,{children:["JavaScript spread syntax ",(0,o.jsx)(n.code,{children:"(...)"})," is a surprisingly powerful construct. It has two main use cases in our applications:"]}),"\n",(0,o.jsx)(n.h2,{id:"shallow-copying",children:"Shallow copying"}),"\n",(0,o.jsx)(n.p,{children:"Spreading creates new instances of objects or array, but we need to be very careful because it only does a shallow copy.\nIf you have a deeply nested object or array, nested entities will still hold a reference to an original value and hence dangerous bugs can occur."}),"\n",(0,o.jsxs)(n.p,{children:["Copying is needed when doing state changes (either local or state management e.g. Redux). If deep cloning is required, ",(0,o.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/structuredClone",children:(0,o.jsx)(n.code,{children:"structuredClone"})})," can be used."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:'function () {\n  // let\xb4s start with a relatively simple object\n  const foo = {\n    a: 1,\n    b: 2,\n    nested: {\n      child: "is not a copy",\n    },\n  };\n  // this will create a shallow copy of foo and add a field "c"\n  const bar = { ...foo, c: 3 };\n  // please note, that the nested property "nested" is not deeply copied,\n  // thus changes to this object will also affect foo.nested\n  bar.nested.child += " <- I told you so";\n\n  // .foo has been copied though and changes to it affect the original only\n  foo.a += 1;\n  return (\n    <>\n      <ul>\n        <li>\n          <code>foo.a</code> was incremented by 1 and is now <code>2</code>\n        </li>\n        <li>\n          accessing <code>bar.nested.child</code> also changed{" "}\n          <code>foo.nested.child</code>\n        </li>\n      </ul>\n      <pre>foo: {JSON.stringify(foo)}</pre>\n      <ul>\n        <li>\n          <code>bar.a</code> has kept its original value <code>1</code>\n        </li>\n        <li>\n          a new property <code>c</code> was added\n        </li>\n      </ul>\n      <pre>bar: {JSON.stringify(bar)}</pre>\n    </>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"populating-jsx-attributes",children:"Populating jsx attributes"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",metastring:"live",live:!0,children:"function App() {\n    // a simple Component, that will render all fields in props\n    const Foo = (props) => (\n        <ul>\n            {\n                Object\n                    .keys(props)\n                    .map(key => (\n                        <li>\n                            <code>{key}</code>:{props[key]}\n                        </li>\n                    )\n                )\n            }\n        </ul>\n    );\n    const data = {\n        a: 1,\n        b: 2,\n        c: 3\n    }\n\n    const { c, ...omittedObject } = data;\n    return (\n        <>\n            {/*\n              Each of the `data` fields are spreaded as props\n            */}\n            <p>Spread all props</p>\n            <Foo {...data}/>\n\n            <p>Add additional prop</p>\n            {/*\n              After we spread, we also add `d` prop.\n            */}\n            <Foo {...data} d={4}/>\n\n            <p>Order of props is important</p>\n            {/*\n              We will replace `a` with 10\n            */}\n            <Foo {...data} a={10} />\n            {/*\n              But this won't replace original `a` with 10\n            */}\n            <Foo a={10} {...data} />\n\n            <p>Omit certain properties</p>\n            {/*\n              If you wish to omit certain fields, you need to write fields \n              that you wish to omit and with `...{newVariableName}` you will create a new\n              object with that name. In our part it's `omittedObject` name.\n            */}\n            <Foo {...omittedObject} />\n        </>\n    );\n}\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.ah)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},3905:(e,n,t)=>{t.d(n,{ah:()=>l});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),f=r,h=u["".concat(c,".").concat(f)]||u[f]||d[f]||a;return t?o.createElement(h,i(i({ref:n},p),{},{components:t})):o.createElement(h,i({ref:n},p))}));p.displayName="MDXCreateElement"}}]);