"use strict";(self.webpackChunkfoomo=self.webpackChunkfoomo||[]).push([[3964],{275:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var r=t(5893),s=t(3905);const i={sidebar_position:1,toc_max_heading_level:5},a="Value Objects",l={id:"projects/gotsrpc/service-interfaces/value-objects",title:"Value Objects",description:"Typically value objects will be serialized / marshalled as JSON. Please refer to this documentation:",source:"@site/docs/projects/gotsrpc/service-interfaces/value-objects.md",sourceDirName:"projects/gotsrpc/service-interfaces",slug:"/projects/gotsrpc/service-interfaces/value-objects",permalink:"/docs/projects/gotsrpc/service-interfaces/value-objects",draft:!1,unlisted:!1,editUrl:"https://github.com/foomo/foomo-docs/tree/main/foomo/docs/projects/gotsrpc/service-interfaces/value-objects.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,toc_max_heading_level:5},sidebar:"projectsSidebar",previous:{title:"Service Interfaces",permalink:"/docs/projects/gotsrpc/service-interfaces/"},next:{title:"Errors",permalink:"/docs/projects/gotsrpc/service-interfaces/errors"}},c={},o=[{value:"Scalar types",id:"scalar-types",level:2},{value:"Supported in Go and TypeScript",id:"supported-in-go-and-typescript",level:3},{value:"Numerics / numbers",id:"numerics--numbers",level:3},{value:"Type Aliases",id:"type-aliases",level:3},{value:"Enumerations",id:"enumerations",level:2},{value:"Slices",id:"slices",level:2},{value:"Scalar types",id:"scalar-types-1",level:3},{value:"Other slice type examples",id:"other-slice-type-examples",level:3},{value:"Structs",id:"structs",level:4},{value:"Nested slices",id:"nested-slices",level:4},{value:"Maps / Records",id:"maps--records",level:2},{value:"Scalars",id:"scalars",level:3},{value:"Structs",id:"structs-1",level:3},{value:"Slices",id:"slices-1",level:3},{value:"Map types",id:"map-types",level:2},{value:"Nested map types",id:"nested-map-types",level:2},{value:"Structs / Interfaces",id:"structs--interfaces",level:2},{value:"Field names",id:"field-names",level:3},{value:"Default Go =&gt; TypeScript",id:"default-go--typescript",level:4},{value:"Idiomatic field names",id:"idiomatic-field-names",level:4},{value:"Optional and nullable fields",id:"optional-and-nullable-fields",level:3},{value:"Hiding values from the client",id:"hiding-values-from-the-client",level:3},{value:"Union Types",id:"union-types",level:3},{value:"Scalars",id:"scalars-1",level:4},{value:"Structs",id:"structs-2",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.ah)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"value-objects",children:"Value Objects"}),"\n",(0,r.jsx)(n.p,{children:"Typically value objects will be serialized / marshalled as JSON. Please refer to this documentation:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://pkg.go.dev/encoding/json#Marshal",children:"https://pkg.go.dev/encoding/json#Marshal"})}),"\n",(0,r.jsx)(n.admonition,{type:"note",children:(0,r.jsx)(n.p,{children:"This is just a few basic examples, that show the basics of mapping Go types to idiomatic TypeScript types."})}),"\n",(0,r.jsx)(n.h2,{id:"scalar-types",children:"Scalar types"}),"\n",(0,r.jsx)(n.h3,{id:"supported-in-go-and-typescript",children:"Supported in Go and TypeScript"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Go"}),(0,r.jsx)(n.th,{children:"TypeScript"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"string"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"bool"}),(0,r.jsx)(n.td,{children:"boolean"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"numerics--numbers",children:"Numerics / numbers"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Go"}),(0,r.jsx)(n.th,{children:"TypeScript"})]})}),(0,r.jsx)(n.tbody,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"int, int8, int16, float32, float64 ..."}),(0,r.jsx)(n.td,{children:"number"})]})})]}),"\n",(0,r.jsx)(n.h3,{id:"type-aliases",children:"Type Aliases"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:"type Greeting string\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"type Greeting = string;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"enumerations",children:"Enumerations"}),"\n",(0,r.jsxs)(n.p,{children:["Go does not support enumerations, but ",(0,r.jsx)(n.code,{children:"gotsrpc"})," will translate constants to TypeScripts enums:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:'type Pet string\n\nconst (\n    Cat Pet  = "cat"\n    Dog Pet  = "dog"\n    Fish Pet = "fish"\n)\n\ntype SeatCount int\n\nconst (\n\tTwoSeats   SeatCount = 2\n\tFiveSeats  SeatCount = 5\n\tSevenSeats SeatCount = 7\n)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:'export enum Pet {\n  Cat = "cat",\n  Dog = "dog",\n  Fish = "fish",\n}\n\nexport enum SeatCount {\n  FiveSeats = 5,\n  SevenSeats = 7,\n  TwoSeats = 2,\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"slices",children:"Slices"}),"\n",(0,r.jsxs)(n.p,{children:["Slices are nilable in Go, thus they can be null in TypeScript. They translate to ",(0,r.jsx)(n.code,{children:"Array<T>|null"})," in TypeScript."]}),"\n",(0,r.jsx)(n.h3,{id:"scalar-types-1",children:"Scalar types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:"[]string\n[]int\n// other numeric types\n[]bool\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"Array<string> | null;\nArray<number> | null;\n// all numeric types are numbers\nArray<boolean> | null;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"other-slice-type-examples",children:"Other slice type examples"}),"\n",(0,r.jsx)(n.h4,{id:"structs",children:"Structs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:"[]Car\n[]*Car\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"Array<Car> | null;\nArray<Car | null> | null;\n"})}),"\n",(0,r.jsx)(n.h4,{id:"nested-slices",children:"Nested slices"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:"[][]string\n[][]int\n// ...\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"Array<Array<string> | null> | null;\nArray<Array<number> | null> | null;\n// ...\n"})}),"\n",(0,r.jsx)(n.h2,{id:"maps--records",children:"Maps / Records"}),"\n",(0,r.jsxs)(n.p,{children:["Like slices Go maps are nilable. They translate to ",(0,r.jsx)(n.code,{children:"Record<K extends keyof any, T>|null"})," in TypeScript."]}),"\n",(0,r.jsx)(n.h3,{id:"scalars",children:"Scalars"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:"map[string]string\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"Record<string, string> | null;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"structs-1",children:"Structs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:"map[string]*Car\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"Record<string, Car | null> | null;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"slices-1",children:"Slices"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:"map[string][]*Car\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"Record<string, Array<Car | null> | null> | null;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"map-types",children:"Map types"}),"\n",(0,r.jsx)(n.p,{children:"Go and TypeScript support map / Record types:"}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsx)(n.p,{children:"Scalar types / type aliases are of particular value when using maps, because they can add strong semantics:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:"type CarDirectory map[ProductID]*Car\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"type CarDirectory = Record<ProductID, Car | null> | null;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"nested-map-types",children:"Nested map types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:"type BrandID string\ntype BrandCarDirectory map[BrandID]map[ProductID]*Car\n// or\ntype BrandCarDirectory map[BrandID]CarDirectory\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"type BrandID = string;\ntype BrandCarDirectory = Record<\n  BrandID,\n  Record<ProductID, Car | null> | null\n> | null;\n// or\ntype BrandCarDirectory = Record<BrandID, CarDirectory> | null;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"structs--interfaces",children:"Structs / Interfaces"}),"\n",(0,r.jsx)(n.p,{children:"Arbitrary Types can be composed in structs."}),"\n",(0,r.jsx)(n.h3,{id:"field-names",children:"Field names"}),"\n",(0,r.jsxs)(n.p,{children:["Naming conventions are different between Go and TypeScript. In order to bridge the gap between Go and TypeScript Go struct fields can be ",(0,r.jsx)(n.a,{href:"https://pkg.go.dev/encoding/json#Marshal",children:"annotated with tags"}),". In this way idiomatic naming of fields can be can be provided for both languages and the translation will be automatic."]}),"\n",(0,r.jsx)(n.h4,{id:"default-go--typescript",children:"Default Go => TypeScript"}),"\n",(0,r.jsx)(n.p,{children:"Without json tags TypeScript field names will be like in Go, which is not idiomatic for TypeScript."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:"type Car struct {\n    GoCase string\n    CamelCase string\n    SnakeCase string\n}\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"interface Car {\n  GoCase:string;\n  CamelCase:string;\n  SnakeCase:string;\n}\n"})}),"\n",(0,r.jsx)(n.h4,{id:"idiomatic-field-names",children:"Idiomatic field names"}),"\n",(0,r.jsx)(n.p,{children:"Json tags allow controlling the name in TypeScript."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:'type Car struct {\n    CamelCase string `json:"camelCase"`\n    SnakeCase string `json:"snake_case"`\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"interface Car {\n  camelCase:string;\n  snake_case:string;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"optional-and-nullable-fields",children:"Optional and nullable fields"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:'type Basic struct {\n    Value string `json:"value"`\n    OptionalValue string `json:"optionalValue,omitempty"`\n    NullableValue *string `json:"nullableValue"`\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"type Basic interface {\n    value:string;\n    optionalValue?:string;\n    nullableValue:string|null;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"hiding-values-from-the-client",children:"Hiding values from the client"}),"\n",(0,r.jsxs)(n.p,{children:["The Go json tag ",(0,r.jsx)(n.code,{children:'`json:"-"`'})," on a struct  allows it to:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"hide fields from clients"}),"\n",(0,r.jsx)(n.li,{children:"prevents clients from setting them in JSON Unmarshalling"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:'type Basic struct {\n    Value string `json:"value"`\n    Secret string `json:"-"`\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"type Basic interface {\n    value:string;\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"union-types",children:"Union Types"}),"\n",(0,r.jsx)(n.p,{children:"When static types seem to be in the way"}),"\n",(0,r.jsx)(n.h4,{id:"scalars-1",children:"Scalars"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:'type (\n\tSpecies struct {\n\t\tLandAnimals  *LandAnimals  `json:"landAnimals,omitempty" gotsrpc:"union"`\n\t\tWaterAnimals *WaterAnimals `json:"waterAnimals,omitempty" gotsrpc:"union"`\n\t}\n\tLandAnimals  string\n\tWaterAnimals string\n\t)\n\t\n\tconst (\n\t\tCat LandAnimals = "cat"\n\t\tDog LandAnimals = "dog"\n\t)\n\t\n\tconst (\n\t\tCatfish WaterAnimals = "catfish"\n\t\tDogfish WaterAnimals = "dogfish"\n\t)\n)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:'export enum WaterAnimals {\n\tCatfish = "catfish",\n\tDogfish = "dogfish",\n}\n\nexport enum LandAnimals {\n\tCat = "cat",\n\tDog = "dog",\n}\n\nexport const Species = { ...github_com_foomo_gotsrpc_playground_server_services_wof.LandAnimals, ...github_com_foomo_gotsrpc_playground_server_services_wof.WaterAnimals }\nexport type Species = github_com_foomo_gotsrpc_playground_server_services_wof.LandAnimals | github_com_foomo_gotsrpc_playground_server_services_wof.WaterAnimals\n'})}),"\n",(0,r.jsx)(n.h4,{id:"structs-2",children:"Structs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",metastring:'title="Go"',children:'type (\n\tTrip struct {\n\t\tKind        string `json:"kind" gotsrpc:"type:\'Trip\'"`\n\t\tDestination string `json:"destination"`\n\t}\n\tCar struct {\n\t\tKind        string `json:"kind" gotsrpc:"type:\'Car\'"`\n\t\tModel       string `json:"model"`\n\t}\n\tPet struct {\n\t\tKind        string `json:"kind" gotsrpc:"type:\'Pet\'"`\n\t\tName        string `json:"name"`\n\t}\n\tPrice struct {\n\t\tTrip *Trip `json:"trip,omitempty" gotsrpc:"union"`\n\t\tCar  *Car  `json:"car,omitempty" gotsrpc:"union"`\n\t\tPet  *Pet  `json:"pet,omitempty" gotsrpc:"union"`\n\t}\n)\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",metastring:'title="TypeScript"',children:"export interface Trip {\n\tkind:'Trip';\n\tdestination:string;\n}\n\nexport interface Car {\n\tkind:'Car';\n\tmodel:string;\n}\n\nexport interface Pet {\n\tkind:'Pet';\n\tname:string;\n}\n\nexport type Price = github_com_foomo_gotsrpc_playground_server_services_wof.Trip | github_com_foomo_gotsrpc_playground_server_services_wof.Car | github_com_foomo_gotsrpc_playground_server_services_wof.Pet | undefined\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.ah)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},3905:(e,n,t)=>{t.d(n,{ah:()=>o});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=r.createContext({}),o=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=o(t),g=s,h=u["".concat(c,".").concat(g)]||u[g]||d[g]||i;return t?r.createElement(h,a(a({ref:n},p),{},{components:t})):r.createElement(h,a({ref:n},p))}));p.displayName="MDXCreateElement"}}]);