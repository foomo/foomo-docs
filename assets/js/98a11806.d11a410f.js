"use strict";(self.webpackChunkfoomo=self.webpackChunkfoomo||[]).push([[1181],{3905:(e,t,n)=>{n.d(t,{Zo:()=>f,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},f=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,f=l(e,["components","mdxType","originalType","parentName"]),u=c(n),p=o,h=u["".concat(s,".").concat(p)]||u[p]||d[p]||i;return n?r.createElement(h,a(a({ref:t},f),{},{components:n})):r.createElement(h,a({ref:t},f))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5105:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={title:"Defer",sidebar_position:1,tags:["Go Basics"]},a="Defer",l={unversionedId:"backend/go-by-example/defer",id:"backend/go-by-example/defer",title:"Defer",description:"In a normal Go application, control flows from the top to the bottom of any function that we call (this is if you don't use branching or looping).",source:"@site/docs/backend/go-by-example/defer.mdx",sourceDirName:"backend/go-by-example",slug:"/backend/go-by-example/defer",permalink:"/docs/backend/go-by-example/defer",draft:!1,editUrl:"https://github.com/foomo/foomo-docs/tree/main/foomo/docs/backend/go-by-example/defer.mdx",tags:[{label:"Go Basics",permalink:"/docs/tags/go-basics"}],version:"current",sidebarPosition:1,frontMatter:{title:"Defer",sidebar_position:1,tags:["Go Basics"]},sidebar:"backendSidebar",previous:{title:"Setup",permalink:"/docs/backend/setup"},next:{title:"Panic and Recover",permalink:"/docs/backend/go-by-example/panic-and-recover"}},s={},c=[],f={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"defer"},"Defer"),(0,o.kt)("p",null,"In a normal Go application, control flows from the top to the bottom of any function that we call (this is if you don't use branching or looping).\nThrough introducing ",(0,o.kt)("inlineCode",{parentName:"p"},"defer")," we can execute the statement passed to it at the end of the function just before it returns. To demonstrate:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n)\n\nfunc main() {\n    fmt.Println("first")\n    fmt.Println("second")\n    fmt.Println("third")\n}\n')),(0,o.kt)("p",null,"If you copy the above code and execute it it will print 'first', 'second' and then 'third'. Now if we introduce ",(0,o.kt)("inlineCode",{parentName:"p"},"defer")," to this function we see the order in which our statements are printed change."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n    fmt.Println("first")\n    defer fmt.Println("second")\n    fmt.Println("third")\n}\n')),(0,o.kt)("p",null,"Executing this function will print: 'first', 'third' and then 'second'. This is because the statement that follows after the ",(0,o.kt)("inlineCode",{parentName:"p"},"defer")," keyword is executed at the end of function we are calling, just before it returns.\nWhen it goes through this function if will print 'first', then it will recognise it has a defer function to call, it will print 'third' and then when it exits the function, it will check if there are any defer functions to call and if so it will call them.\nWhich in our case is the print function that prints 'second'.\nWhat would happen if we add the defer keyword before each of our prints?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n    defer fmt.Println("first")\n    defer fmt.Println("second")\n    defer fmt.Println("third")\n}\n')),(0,o.kt)("p",null,"This results into 'third' being printed first, followed by 'second' and then 'first'. This is because the defer keyword executes in last-in-first-out (LIFO) order.\nThis makes sense because defer is usually used to close out resources, and it is logical to close these in the opposite order of which they are opened because one resource might be dependend on another one."),(0,o.kt)("p",null,"It's good practice to use defer to close a response body right after you have opened it. In this way you make sure all resources that have been opened have been closed and in this way it can prevent some bugs.\nWhat you will see often is something like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n    resp, err := http.Get("http://www.foomo.org")\n    if err != nil {\n        log.Fatal(err)\n    }\n    defer resp.Body.Close()\n}\n')),(0,o.kt)("p",null,"You open a resource, check if there is an error and after it use defer to close it before the function returns."),(0,o.kt)("p",null,"Another thing to keep in mind with defer is that it will execute with the value given to it at the time. To demonstrate:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func main() {\n    myVar := "hello"\n    defer fmt.Println(myVar)\n    myVar = "goodbye"\n}\n')),(0,o.kt)("p",null,"What do you think this prints? You might think it will print 'goodbye' because that is the last value of the variable before the main function returns.\nSurprisingly the value printed is 'hello', which is likely the result of a compiler optimization."))}d.isMDXComponent=!0}}]);