"use strict";(self.webpackChunkfoomo=self.webpackChunkfoomo||[]).push([[2346],{1259:(e,t,n)=>{n.d(t,{X:()=>c});var a=n(7462),i=n(2801),l=n(7294),o=n(4991),r=n(9030),s=n(3746),d=n(9960);const c=e=>{const[t,n]=(0,l.useState)(!1),[c,p]=(0,l.useState)(""),m=(0,i.r)();(0,l.useEffect)((()=>{""==c&&""!==e.id&&fetch("https://docs.bestbytes.com/services/playground?id="+e.id,{mode:"cors"}).then((e=>e.text().then((e=>p(e))))).catch((e=>p("can not load source yet")))}),[c]);const u="https://goplay.tools/snippet/"+e.id;return l.createElement(l.Fragment,null,l.createElement("div",{style:{paddingBottom:"1rem",width:"100%"}},t?l.createElement(l.Fragment,null,l.createElement("button",{className:"button button--primary",onClick:e=>{n(!1)}},"close playground")," ",l.createElement("button",{className:"button button--primary"+(t?"":" disabled"),onClick:e=>{m.enter()}},"fullscreen")," "):l.createElement("button",{className:"button button--primary",onClick:e=>{n(!0)}},"open playground")," ",l.createElement(d.Z,{href:u},"go to ",u)),!t&&l.createElement(s.ZP,(0,a.Z)({},s.lG,{code:c,language:"go"}),(e=>{let{className:t,style:n,tokens:a,getLineProps:i,getTokenProps:o}=e;return l.createElement("pre",{className:t,style:n},""==c?"... loading sources":"",a.map(((e,t)=>l.createElement("div",i({line:e,key:t}),e.map(((e,t)=>l.createElement("span",o({token:e,key:t}))))))))})),l.createElement("div",{style:{display:t?"block":"none"}},l.createElement(r.k,{topic:"load external go playground, with all it\xb4s potentially evil cookies coming from https://goplay.tools",id:"goPlaygroundIsCool"},l.createElement("div",null,l.createElement(i.I,{handle:m},l.createElement(o.h,{src:u,proportion:e.proportion}))))))}},4991:(e,t,n)=>{n.d(t,{h:()=>i});var a=n(7294);const i=e=>{let{proportion:t,src:n}=e;return t||(t=4/3),e.style||(e.style={}),a.createElement("div",{style:{width:"100%",height:0,paddingTop:100/t+"%",position:"relative",float:"left",...e.style}},a.createElement("iframe",{style:{width:"100%",height:"100%",display:"block",position:"absolute",top:0,left:0},src:n,frameBorder:"0",scrolling:"no",allowFullScreen:!0}))}},9030:(e,t,n)=>{n.d(t,{k:()=>l});var a=n(7294);const i="undefined"==typeof localStorage,l=e=>{const[t,n]=(0,a.useState)((l=e.id,"undefined"!=typeof localStorage&&localStorage.getItem(l)));var l;return(0,a.useEffect)((()=>{console.log("well it is cool",e.id,{isCool:t,SSR:i})}),[t,i]),t?e.children:a.createElement("div",null,a.createElement("button",{className:"button button--lg button--secondary",onClick:t=>{localStorage.setItem(e.id,"yes"),n(!0)}},e.topic))}},3756:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),i=(n(7294),n(3905)),l=n(1259);const o={Title:"Files",position:14,tags:["Go Basics"]},r="Files",s={unversionedId:"backend/go-by-example/files",id:"backend/go-by-example/files",title:"Files",description:"There are multiple packages we can utilize for reading files in a go program. We'll go over the most commonly used ones in this section.",source:"@site/docs/backend/go-by-example/files.mdx",sourceDirName:"backend/go-by-example",slug:"/backend/go-by-example/files",permalink:"/docs/backend/go-by-example/files",draft:!1,editUrl:"https://github.com/foomo/foomo-docs/tree/main/foomo/docs/backend/go-by-example/files.mdx",tags:[{label:"Go Basics",permalink:"/docs/tags/go-basics"}],version:"current",frontMatter:{Title:"Files",position:14,tags:["Go Basics"]},sidebar:"backendSidebar",previous:{title:"Embed",permalink:"/docs/backend/go-by-example/embed"},next:{title:"Go Routines and Channels",permalink:"/docs/backend/go-by-example/goroutines-and-channels"}},d={},c=[{value:"IOUtil",id:"ioutil",level:2},{value:"Read Whole File",id:"read-whole-file",level:3},{value:"OS",id:"os",level:2},{value:"Open Files",id:"open-files",level:3},{value:"Reading Files",id:"reading-files",level:3},{value:"Writing Files",id:"writing-files",level:3},{value:"Getting File Information",id:"getting-file-information",level:3},{value:"BufIO",id:"bufio",level:2},{value:"Scanner",id:"scanner",level:3},{value:"ReadSlice",id:"readslice",level:3},{value:"ReadBytes",id:"readbytes",level:3},{value:"Examples",id:"examples",level:2},{value:"Read Lines",id:"read-lines",level:3},{value:"Read Bytes",id:"read-bytes",level:3}],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"files"},"Files"),(0,i.kt)("p",null,"There are multiple packages we can utilize for reading files in a go program. We'll go over the most commonly used ones in this section.\nThese include: ",(0,i.kt)("inlineCode",{parentName:"p"},"os"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"io"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ioutil")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"bufio"),". We'll go over some commonly used methods for each of these packages in this section."),(0,i.kt)("h2",{id:"ioutil"},"IOUtil"),(0,i.kt)("h3",{id:"read-whole-file"},"Read Whole File"),(0,i.kt)("p",null,"To read a whole file you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"ReadFile")," function."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"// Takes a filepath as argument\n// Returns a byteslice and an error\nbyteslice, err := ioutil.ReadFile(filepath)\n")),(0,i.kt)("h2",{id:"os"},"OS"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"os")," package provides and interface with methods to handle files on your operating system in go. "),(0,i.kt)("h3",{id:"open-files"},"Open Files"),(0,i.kt)("p",null,"To open a file using the ",(0,i.kt)("inlineCode",{parentName:"p"},"os")," package, use the Open method. This method takes a filepath and returns the opened file and an error."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"file, err := os.Open(filepath)\n")),(0,i.kt)("h3",{id:"reading-files"},"Reading Files"),(0,i.kt)("p",null,"To read a file using the ",(0,i.kt)("inlineCode",{parentName:"p"},"os")," package, use the ReadFile method. This method takes a filepath and returns the contents of the file in a byteslice and an error."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"byteslice, err := os.ReadFile(filepath)\n")),(0,i.kt)("h3",{id:"writing-files"},"Writing Files"),(0,i.kt)("h3",{id:"getting-file-information"},"Getting File Information"),(0,i.kt)("p",null,"To get information about a file using the ",(0,i.kt)("inlineCode",{parentName:"p"},"os")," package, use the Stat method. This method takes a filepath and information of the selected file and an error.\nThis information includes methods: Name() to get the name of the file, Size() to get the size the file in bytes, Mode() to get the mode of the file,\nIsDir() to find out if it is a directory, ModTime() showing when the file was last modified, and Sys() describing the underlying data source."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"fileInfo, err := os.Stat(filepath)\n")),(0,i.kt)("h2",{id:"bufio"},"BufIO"),(0,i.kt)("p",null,"Sometimes opening a whole file is not ideal, this is for example when you have a very large log file. All of it is going to be opened in memory.\nFor these cases you can buffer the IO, this can increase the speed of your application by reducing the number of system calls made.\nBufio provides ways to read by the file in batches. Commonly used methods in the bufIO package include: ",(0,i.kt)("inlineCode",{parentName:"p"},"Scanner"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ReadSlice"),",",(0,i.kt)("inlineCode",{parentName:"p"},"ReadBytes")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"ReadLines"),"."),(0,i.kt)("h3",{id:"scanner"},"Scanner"),(0,i.kt)("p",null,"Breaks the data up in tokens. Open the file with the ",(0,i.kt)("inlineCode",{parentName:"p"},"os")," Open function and pass the reader to the NewScanner function. This will return a pointer to a Scanner."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"myScanner =  bufio.NewScanner(myIOReader)\n")),(0,i.kt)("h3",{id:"readslice"},"ReadSlice"),(0,i.kt)("p",null,"This function returns a slice of the passed string based on the delimiter you pass it.\nIt will return every slice with the delimiter. To call it initialize a new reader with the specified string and pass the ReadSlice method a delimiter."),(0,i.kt)(l.X,{id:"0ZFnnUjBk6l",proportion:1.6,mdxType:"GoPlayground"}),(0,i.kt)("h3",{id:"readbytes"},"ReadBytes"),(0,i.kt)("p",null,"ReadBytes builds on the ReadSlice functionality and is called in a similar fashion. The difference is that ReadSlice is bound to a buffersize, if it does\nnot reach the delimiter within that size it will fail. ReadBytes is able to call ReadSlice multiple times which means that if you go over the buffersize\nit won't encounter a problem. To demonstrate:"),(0,i.kt)(l.X,{id:"Jl9B6I1a8d-",proportion:1.6,mdxType:"GoPlayground"}),(0,i.kt)("h2",{id:"examples"},"Examples"),(0,i.kt)("h3",{id:"read-lines"},"Read Lines"),(0,i.kt)("p",null,"The following code provides a way to read lines from a file. It uses the ",(0,i.kt)("inlineCode",{parentName:"p"},"os")," package to open the file and then ",(0,i.kt)("inlineCode",{parentName:"p"},"bufio")," to create a scanner\nthat reads the file line by line."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "os"\n    "bufio"\n)\n\nfunc main() {\n\n    file, err := os.Open(filepath)\n        if err != nil {\n            fmt.Println("Error:", err.Error())\n            return\n        }\n        defer os.Close() // Make sure to always close your resources\n\n    scanner := bufio.NewScanner(file)\n    for scanner.Scan() { // returns a boolean, so until the end of the file is reached this loop will run\n        fmt.Println(scanner.Text())\n    }\n}\n')),(0,i.kt)("h3",{id:"read-bytes"},"Read Bytes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "fmt"\n    "os"\n    "bufio"\n    "io"\n)\n\nfunc main() {\n\n    fileHandler, err := os.Open(filename)\n        if err != nil {\n            fmt.Println("Error:", err.Error())\n            return\n        }\n        defer os.Close() // Make sure to always close your resources\n\n\n    myBuffer := make([]byte, size) // Make a buffer with size of size\n    for { \n        readBytes, err := fileHandler.Read(buf) \n        if err != nil {\n            if err != io.EOF {\n                fmt.Println("Error:", err.Error())\n                return\n            }\n            break\n        }\n\n        fmt.Println(string(myBuffer[:readBytes]))\n    }\n}\n')))}u.isMDXComponent=!0}}]);