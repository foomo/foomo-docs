<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.foomo.org/blog</id>
    <title>foomo project docs Blog</title>
    <updated>2022-01-20T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.foomo.org/blog"/>
    <subtitle>foomo project docs Blog</subtitle>
    <icon>https://www.foomo.org/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[The never ending search a search engine 2022-01 edition]]></title>
        <id>searching-for-search-engines</id>
        <link href="https://www.foomo.org/blog/searching-for-search-engines"/>
        <updated>2022-01-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[While building this website and integrating https://docsearch.algolia.com and evaluating another solution by a large company in parallel I could not help to search github and the web for the current state of search engines and search related services.]]></summary>
        <content type="html"><![CDATA[<p>While building this website and integrating <a href="https://docsearch.algolia.com">https://docsearch.algolia.com</a> and evaluating another solution by a large company in parallel I could not help to search github and the web for the current state of search engines and search related services.</p><p>Since I had done the same thing about a year ago, I was surprised to see how quickly things are moving atm.</p><h2>Algolia</h2><p>I was blown away by the quality of <a href="https://www.algolia.com">https://www.algolia.com</a> and I wish it was open source, but I guess, we all have to make a living ;)</p><p>To see how awesome a web (search) interface can be check out <a href="https://www.lacoste.com/us/#query=red%20jackets%20for%20men">https://www.lacoste.com/us/#query=red%20jackets%20for%20men</a> </p><p>Apart from that the UI/UX of their backend tools is fantastic.</p><h2>Elastic</h2><p>When it comes to <a href="https://www.elastic.com">https://www.elastic.com</a> I am a bit nervous about the future of the licensing, despite the fact, that I understand their motivation. At the same time the <a href="https://opensearch.org">https://opensearch.org</a> does not seem to be an ampty threat.</p><h2>typesense.org</h2><p>I do not know, who was hiding under a rock, but I had not seen <a href="https://typesense.org">https://typesense.org</a> before and they certainly have a bold claim: <strong><em>&quot;The Open Source Algolia Alternative&quot; / &quot;The Easier To Use ElasticSearch Alternative&quot;</em></strong> </p><p>When looking at <a href="https://github.com/typesense/typesense/graphs/contributors">https://github.com/typesense/typesense/graphs/contributors</a> it seems, that Kishore Nallan has been working on this for a while. Unfourtunately I do not really see a lot of external contributions, C++ does not seem to attract a lot of contribution.</p><h2>MeiliSearch</h2><p>This Rust project <a href="https://www.meilisearch.com/">https://www.meilisearch.com/</a> seems to be picking up speed and is definetly on the test short list. It is a fresh codebase with siginficant open source contributions and certainly will attract new developers with Rust and a modern architecture.</p><h2>Go eco system</h2><p>Obviously we are very interested in Go powered software and there are a few notable projects. ATM I do not see anything elastic or algolia like, that would be really mature. </p><h3>bleve / bluge</h3><p><a href="https://github.com/mschoch">Marty Schoch</a> seems to be the man when it comes down to text indexing libraries in written in Go and bluge seems to be THE library, that is solid and modern, when implementing text search in your Go application.</p><p><a href="https://github.com/blevesearch/bleve">https://github.com/blevesearch/bleve</a>
<a href="https://github.com/blugelabs/bluge">https://github.com/blugelabs/bluge</a> // next iteration of bleve</p><h4>projects using bluge</h4><p>All bleeding edge afaik atm - but definitely good places to look at bluge usage</p><p><a href="https://github.com/prabhatsharma/zinc">https://github.com/prabhatsharma/zinc</a>
<a href="https://github.com/mosuka/phalanx">https://github.com/mosuka/phalanx</a></p><h3>Look ma I made a vector database</h3><p>Gotta take a look at this one - will report later</p><p><a href="https://github.com/semi-technologies/weaviate">https://github.com/semi-technologies/weaviate</a></p>]]></content>
        <author>
            <name>Jan Halfar</name>
            <uri>https://github.com/janhalfar</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Impact of 3rd party scripts on performance]]></title>
        <id>impact-of-3rd-party-scripts-on-performance</id>
        <link href="https://www.foomo.org/blog/impact-of-3rd-party-scripts-on-performance"/>
        <updated>2022-01-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Issue with performance]]></summary>
        <content type="html"><![CDATA[<h2>Issue with performance</h2><p>When building an ecommerce site or an application where performance is a great deal for the users, you need to keep your application fast and responsive. Frontend developers have already many use-cases when the UI becomes laggy and this increases when 3rd party scripts are being included, such as Google Tag Manager or various Live chats (e.g. Intercom).</p><p>This does not only influences the users when using the site but also Lighthouse score gets lower which also influences page rankings. So the most naive and easy way for this is to defer loading of such scripts but when you need to get all the data from the start of the application, such tactic is not an option. So what else can we do?</p><h2>Partytown to the rescue</h2><p>Developers at BuilderIO created an library <a href="https://github.com/BuilderIO/partytown">Partytown</a> that would allow relocating resources from 3rd party scripts off the main thread.
We won&#x27;t dive into specifics how it works, because they explain it nicely on their GitHub page.</p><p>In our stack we use <a href="https://nextjs.org/">Next.js</a> React framework and we will go through the basic steps that will allow us to include Partytown for Google Tag Manager.</p><h3>Setup</h3><p>Partytown script needs to be located inside our application and live on the same domain. Since we&#x27;re using monorepo structure, we need to copy this script across all our frontend application. For that we used CopyPlugin webpack plugin in our Next.js config file:</p><pre><code class="language-javascript">config.plugins.push(
      ...
      new CopyPlugin({
        patterns: [
          {
            // we copy script from node_modules partytown package to `~partytown` folder in our package that serves static files
            from: path.join(path.dirname(require.resolve(&#x27;@builder.io/partytown&#x27;)), &#x27;lib&#x27;),
            // paths for SSR and client side rendering differ
            to: path.join(`${isServer ? &#x27;..&#x27; : &#x27;.&#x27;}/static/assets/`, &#x27;~partytown&#x27;),
          },
        ],
      })
    );
</code></pre><p>Partytown&#x27;s requirement is that it needs to know what script should it load into own web worker. For that we set script type to <code>text/partytown</code>. This will prevent script to load on initial load.</p><p>Inside <code>_document.tsx</code> we add this:</p><pre><code class="language-javascript">&lt;Head&gt;
    ...
    // include Partytown and set custom path due to multiple frontends
    &lt;Partytown lib={`${addTrailingSlash(this.props.basePath)}_next/static/assets/~partytown/`} debug={false} /&gt;
    // tag 3rd party script with partytown type
    &lt;script type=&quot;text/partytown&quot; src={`https://www.googletagmanager.com/gtm.js?id=${id}`} /&gt;
    ...
&lt;/Head&gt;
</code></pre><h2>Results</h2><p>So now, does it work? We used one of our large Ecommerce sites to test the landing Lighthouse score. </p><p>This was before adding Partytown:</p><p><img src="lighthouse_before.jpg" alt="Lighthouse before Partytown"/></p><p>Here you can see 2 critical things: almost 1s of total blocking time (TBT) and 9s of time to interactive (TTI). </p><p>After we added Partytown, we got this:</p><p><img src="lighthouse_after.jpg" alt="Lighthouse after Partytown"/></p><p>Time to interactive went from 9s to 6.1s which is almost 33% improvement and total blocking time was reduce by more than 50%! We were more than impressed how easy it was to improve our performances.</p><p>Side note: Both screenshots were compressed using <a href="https://squoosh.app/">Squoosh App</a>.</p><h1>Next steps</h1><p>After successful testing of Partytown for Google Tag Manager script, we are more than interested in trying it out on our other scripts. One important topic will be to test Partytown with other service-worker related libraries and how to use them together.</p>]]></content>
        <author>
            <name>Marko Trebi≈æan</name>
            <uri>https://github.com/themre</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[debugging Go map races in k8s]]></title>
        <id>debugging-go-map-races-in-k8s</id>
        <link href="https://www.foomo.org/blog/debugging-go-map-races-in-k8s"/>
        <updated>2022-01-19T00:00:00.000Z</updated>
        <author>
            <name>Philipp Mieden</name>
            <uri>https://github.com/dreadl0ck</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Relaunching foomo.org]]></title>
        <id>welcome-back-2021</id>
        <link href="https://www.foomo.org/blog/welcome-back-2021"/>
        <updated>2021-11-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A few years ago we abandoned the previous version of https//www.github.com/foomo .]]></summary>
        <content type="html"><![CDATA[<p>A few years ago we abandoned the previous version of <a href="https://www.foomo.org">https://www.foomo.org</a> as we did not want to maintain the old wordpress installation and the project was only living in README.md in the repos living under <a href="https://www.github.com/foomo">https://www.github.com/foomo</a> .</p><p>As things have grown over time we have decided to re-launch a website / cross project documentation.</p><p>So welcome back and enjoy the view to the past:</p><p><img src="blast-from-the-past.png" alt="blast from the past"/></p>]]></content>
        <author>
            <name>Jan Halfar</name>
            <uri>https://github.com/janhalfar</uri>
        </author>
    </entry>
</feed>